// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package file

import "encoding/json"

type StringPath = []String

type StringNode struct {
	Value String

	children StringNodeList
}

func NewStringNode(val String) *StringNode {
	return &StringNode{Value: val}
}

func ParseStringPath(path StringPath) *StringNode {
	var node *StringNode
	if l := len(path); l > 0 {
		node = NewStringNode(path[0])
		if l > 1 {
			child := ParseStringPath(path[1:])
			node.Add(child)
		}
	}
	return node
}

var RootStringNode StringNode

func (n *StringNode) getChildren() StringNodeList {
	return n.children.init()
}

func (n *StringNode) Add(node *StringNode) {
	n.getChildren().add(node)
}

func (n StringNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(n.children)
}

type PathPath = []Path

type PathNode struct {
	Value Path

	children PathNodeList
}

func NewPathNode(val Path) *PathNode {
	return &PathNode{Value: val}
}

func ParsePathPath(path PathPath) *PathNode {
	var node *PathNode
	if l := len(path); l > 0 {
		node = NewPathNode(path[0])
		if l > 1 {
			child := ParsePathPath(path[1:])
			node.Add(child)
		}
	}
	return node
}

var RootPathNode PathNode

func (n *PathNode) getChildren() PathNodeList {
	return n.children.init()
}

func (n *PathNode) Add(node *PathNode) {
	n.getChildren().add(node)
}

func (n PathNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(n.children)
}
